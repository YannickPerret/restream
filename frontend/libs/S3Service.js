import { S3Client, PutObjectCommand } from '@aws-sdk/client-s3';
import { getSignedUrl } from '@aws-sdk/s3-request-presigner';


class S3Service {
    constructor() {
        this.s3Client = new S3Client({
            region: process.env.NEXT_PUBLIC_REGION,
            credentials: {
                accessKeyId: process.env.NEXT_PUBLIC_ACCESS_KEY_ID,
                secretAccessKey: process.env.NEXT_PUBLIC_SECRET_ACCESS_KEY,
            },
        });
    }

    async generatePresignedUrl(fileName, contentType) {
        const params = {
            Bucket: process.env.NEXT_PUBLIC_BUCKET,
            Key: fileName,
            ContentType: contentType,
        };

        try {
            const command = new PutObjectCommand(params);

            // Generate the presigned URL with a 60 seconds expiration
            const signedUrl = await getSignedUrl(this.s3Client, command, { expiresIn: 120 });

            console.log('Presigned URL generated successfully:', signedUrl);
            return signedUrl;
        } catch (error) {
            console.error('Error generating presigned URL:', error);
            throw error;
        }
    }

    // Upload file to S3
    async uploadFile(fileStream, fileName, contentType) {
        const params = {
            Bucket: process.env.NEXT_PUBLIC_BUCKET,
            Key: fileName,
            Body: fileStream,
            ContentType: contentType,
        };

        try {
            const command = new PutObjectCommand(params);
            const response = await this.s3Client.send(command);
            console.log('File uploaded successfully:', response);

            // Return the S3 URL of the uploaded file
            return `${process.env.NEXT_PUBLIC_ENDPOINT}/${process.env.NEXT_PUBLIC_BUCKET}/${fileName}`;  // Use without PUBLIC_
        } catch (error) {
            console.error('Error uploading file to S3:', error);
            throw error;
        }
    }

    async uploadFileWithPolicy(file, uploadPolicy) {
        const formData = new FormData();

        // Add the policy fields to the formData (from the policy generated by your backend)
        for (const [key, value] of Object.entries(uploadPolicy.fields)) {
            console.log('Appending key:', key, 'with value:', value);
            formData.append(key, value);
        }

        // Append the actual file to the formData
        formData.append('file', file);

        try {
            const response = await fetch(uploadPolicy.url, {
                method: 'POST',
                body: formData,
            });

            if (!response.ok) {
                throw new Error('Failed to upload the file to S3');
            }

            console.log('File uploaded successfully to S3');
            // Return the key so you can save it to the database if needed
            return uploadPolicy.fields.key;
        } catch (error) {
            console.error('Error uploading file to S3:', error);
            throw error;
        }
    }
}

export default new S3Service();
